#!/bin/bash

######################################################################
##|A gobuster v3.1.0 helper script
##|Usage:
##| arbuster [options]
##|
##|Options:
##|  -h, --help                             Help for arbuster
##|  -e, --expanded                         Expanded mode, print full URLs
##|  -r, --follow-redirect                  Follow redirects
##|  -x, --extensions string                File extension(s) to search for
##|  -t, --token string                     Access token to be put in the Authorization header
##|                                             Authorization: Bearer <token>
##|  --auth string                          Authorization header value
##|                                             Authorization: <value>
##|  -w, --wordlist string                  Path to the wordlist
##|  -u, --url string                       The target URL. Can be used multiple times to specify more target URLs
##|  -uf, --url-file string                 The path to a file containing the target URLs
##|  -a, --useragent [preset, custom]       The user agent string to use. Use supplied presets or a custom string
##|                                         Presets
##|                                             Firefox = Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0
##|                                             Chrome = Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36
##|                                             Safari = Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_2) AppleWebKit/601.3.9 (KHTML, like Gecko) Version/9.0.2 Safari/601.3.9
##|  --proxy string                         Proxy to use for requests [[http(s)|socks(4|5)]://host:port]
##|  -o, --output-dir string                Host specific output directory to write results to
##|                                         Default: recon
##|  -b, --status-codes-blacklist string    Comma delimited list of blacklisted status codes
##|                                         Format: [+|-]code[,code]
##|                                             +   Blacklist status code in addition to the default
##|                                             -   Don't blacklist status code from the default
##|                                         Note: If no status codes are prepended with + or -
##|                                               the provided list will override the default
##|
##|                                         Default: 404
##|  -k, --no-tls-validation                Skip SSL certificate verification
##|  --wildcard                             Force continued operation when wildcard found
##|  --exclude-length ints                  Exclude the following content length (completely ignores the status). Supply multiple times to exclude multiple sizes.
##|  --                                     Pass the rest of the arguments to gobuster
######################################################################

gb_args=()
gb_args_count=0
add_gb_args() {
    while [[ $# -gt 0 ]]; do
        gb_args[$gb_args_count]="$1"
        gb_args_count=$(($gb_args_count + 1))
        shift
    done
}

errored_urls=()
errored_urls_count=0
add_errored_url() {
    errored_urls[$errored_urls_count]="$1"
    errored_urls_count=$(($errored_urls_count + 1))
}
show_usage() {
    cat $0 | grep -a "^##[\|]" | sed "s/##[|]//g"
}
get_as_sorted_list() {
    # replace commas with new line and sort
    echo "$1" | sed 's/,/\n/g' | sort -h | uniq
}
get_difference() {
    comm -23 <(get_as_sorted_list $1) <(get_as_sorted_list $2) | combine_lines
}
combine_lines() {
    echo $(cat -) | sed 's/\s/,/g'
}
list_by_prefix() {
    sed 's/,/\n/g' | grep $1 | cut -d$1 -f2
}
run(){
    hostname=`echo $url | sed "s/http\(s\)\?:\/\///" | cut -d/ -f1`
    output_file="gobuster.$(echo "$url" | sed "s/:\/\//./" | sed 's/\//\./g').$wordlist_name.txt"
    output_path="$output_dir/$output_file"

    # if host dir exists we are in the op root.
    if [ -d hosts ]; then

        # Check if hostname is an IP
        if echo $hostname | grep -qP "(?:(?:2(?:[0-4][0-9]|5[0-5])|[0-1]?[0-9]?[0-9])\.){3}(?:(?:2([0-4][0-9]|5[0-5])|[0-1]?[0-9]?[0-9]))"; then
            host=$hostname

            # Get hostname from IP
            hostname=$(host $host | grep "domain name pointer" | awk '{print $NF}' | sed 's/\.$//')
        else
            # Get IP from hostname
            host=`host $hostname | grep "has address" | cut -d' ' -f4 | head -n 1`
            if [[ -z "$host" ]]; then
                echo "Error resolving $hostname"
                return 1
            fi
        fi

        mkdir -p hosts/$host/recon
        cd hosts/$host
    fi

    if [[ -n "$hostname" ]]; then
        if [ ! -f hostname ]; then
            echo "$hostname" > hostname
        fi


        # Check if hostname is an IP
        if ! echo $hostname | grep -qP "(?:(?:2(?:[0-4][0-9]|5[0-5])|[0-1]?[0-9]?[0-9])\.){3}(?:(?:2([0-4][0-9]|5[0-5])|[0-1]?[0-9]?[0-9]))"; then
          echo "$hostname" >> recon/hostnames.txt
          cat recon/hostnames.txt | sed 's/^\*\.//g' | sed 's/:[0-9]*//g' | sed 's/\.$//g' | tr 'A-Z' 'a-z' | sort -h |  uniq > recon/hostnames.txt.new
          mv recon/hostnames.txt.new recon/hostnames.txt
        fi
    fi

    # tee to output_path instead of using gobusters output. this way the gobuster header gets saved and error message
    # -z to prevent progress updates, since we are redirecting stderr to stdout
    # redirect stderr to stdout so we can see what went wrong during the run
    # since we have lots of extra info in the file, we'll have to grep instead of cat the file
    # grep -P "^https?:" $output_path
    gobuster dir -z -w $wordlist_file -u $url "${gb_args[@]}" $@ 2>&1 | tee $output_path
    if [ $? -gt 0 ]; then
        add_errored_url "$url"
    fi
    cleanup
    cd - > /dev/null
}
cleanup() {
    find ./ -regex ".*gobuster.*" -size 0 -exec rm "{}" ";"
}
show_errored_urls() {
    if [ $errored_urls_count -gt 0 ]; then
        echo "[!] Errored URLs:"
        echo "${errored_urls[@]}" | sed 's/\s/\n/g'
    fi
}
graceful_exit() {
    show_errored_urls

    echo
    echo "Exiting"
    exit 0
}

trap graceful_exit SIGINT

if [[ $# -eq 0 ]]; then
    show_usage
    exit 0
fi

output_dir="recon"
status_codes="404"
while [[ "$1" =~ ^- && ! "$1" == "--" ]]; do
    case $1 in
        -e|--expanded)
            add_gb_args $1
            ;;
        -r|--follow-redirect)
            add_gb_args $1
            ;;
        -x|--extensions)
            add_gb_args $1 "$2"
            shift
            ;;
        -k|--no-tls-validation)
            add_gb_args $1
            ;;
        --wildcard)
            add_gb_args $1
            ;;
        -t|--token) # access token for authorization
            add_gb_args -H "Authorization: Bearer $2"
            shift
            ;;
        --auth)
            add_gb_args -H "Authorization: $2"
            shift
            ;;
        -w|--wordlist)
            wordlist_file=$(realpath "$2")
            wordlist_name=`basename $wordlist_file`
            wordlist_name="${wordlist_name%.*}"
            shift
            ;;
        -u|--url)
            url="$2"
            if [[ -z "$urls" ]]; then
                urls="$url"
            else
                urls=`echo -e "$2\n$urls" | sort -h | uniq`
            fi
            shift
            ;;
        -uf|--url-file)
            contents=`cat "$2" | grep -v "^#"`
            if [[ -z "$urls" ]]; then
                urls="$contents"
            else
                urls=`echo -e "$contents\n$urls" | sort -h | uniq`
            fi
            shift
            ;;
        -a|--useragent)
            agent="$2"

            case "$agent" in
                Firefox|firefox)
                    agent='Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0'
                    ;;
                Safari|safari)
                    agent='Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_2) AppleWebKit/601.3.9 (KHTML, like Gecko) Version/9.0.2 Safari/601.3.9'
                    ;;
                Chrome|chrome)
                    agent='Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36'
                    ;;
            esac
            add_gb_args -a "$agent"
            shift
            ;;
        --proxy)
            add_gb_args --proxy "$2"
            shift
            ;;
        --exclude-length)
            add_gb_args --exclude-length "$2"
            shift
            ;;
        -o|--output-dir)
            output_dir="$2"
            shift
            ;;
        -h|--help)
            show_usage
            exit 0
            ;;
        -b|--status-codes-blacklist) # blacklisted status codes
            # Split by comma, get all codes to remove, and combine back into comma separated list
            remove_codes=`echo "$2" | list_by_prefix - | combine_lines`

            # Split by comma, get all codes to add, and combine back into comma separated list
            add_codes=`echo "$2" | list_by_prefix + | combine_lines`
            if [[ -z $remove_codes && -z $add_codes ]]; then
                status_codes=`echo "$2" | sed 's/ //g'`
            else
                if [[ -n "$add_codes" ]]; then
                    status_codes="$status_codes,$add_codes"
                fi

                status_codes=`get_difference $status_codes $remove_codes`
            fi
            add_gb_args -b "$status_codes"
            shift
            ;;
    esac;
    shift;
done
if [[ "$1" == '--' ]]; then
    shift
fi

for url in $urls; do
    run $@
done

show_errored_urls
