#! /usr/bin/env arsenic

cobra := import("cobra")
os := import("os")
os2 := import("os2")
filepath := import("filepath")
nmap := import("nmap")
script := import("script")
log := import("log")

topPorts := 0
targets := []

setupHost := func(target) {
  baseDir := ""
  if filepath.dir_exists("hosts") {
    baseDir = filepath.join("hosts", target)
  }

  err := os.mkdir_all(filepath.join(baseDir, "loot"), 0755)
  check_err(err)

  err = os.mkdir_all(filepath.join(baseDir, "recon"), 0755)
  check_err(err)

  return baseDir
}

defaultScanner := func(target, args) {
  scanner := nmap.scanner().
    stylesheet("/static/nmap.xsl").
    open().
    Pn().
    n().
    system_dns().
    targets(target)
  if len(args) > 0 {
    scanner.custom_args(args...)
  }

  return scanner
}

rootCmd := cobra.root_cmd(script.name, "Run nmap scans on targets")
rootCmd.enable_completion()

rootCmd.persistent_flags.string_slicep("targets", "t", [], "The target to scan. Can be used multiple times to specify multiple targets")
rootCmd.persistent_flags.stringp("target-file", "f", "", "The file containing the targets to scan.")
rootCmd.persistent_flags.int("top", 0, "Scan # most common ports")

rootCmd.set_persistent_pre_run(func(cmd, args) {
  targets = cmd.flags.get_string_slice("targets")
  file := cmd.flags.get_string("target-file")

  if file != "" {
    lines := os2.read_file_lines(file)
    check_err(lines)

    for line in lines {
      targets = append(targets, line)
    }
  }

  for line in os2.read_stdin() {
    targets = append(targets, line)
  }

  if len(targets) == 0 {
    script.stop("No targets specified")
  }

  topPorts = cmd.flags.get_int("top")
})

// TCP Command

tcpCmd := cobra.cmd("tcp", "Run TCP scans")
rootCmd.add_command(tcpCmd)

tcpCmd.set_run(func(cmd, args){
  topScan := func(target) {
    log.msg(format("Scanning %s: top %d TCP ports", target, topPorts))

    scanner := defaultScanner(target, args).
      privileged().
      oA(filepath.from_slash(format("recon/nmap-top-%d-tcp", topPorts))).
      host_timeout("30m"). // Make an argument/configurable
      A().
      top_ports(topPorts)
    
    run := scanner.run()
    check_err(run)
  }

  quickScan := func(target) {
    scanner := defaultScanner(target, args).
      T3().
      host_timeout("30m"). // Make an argument/configurable
      ports("-").
      oA(filepath.from_slash("recon/nmap-punched-quick-tcp"))

    run := scanner.run()
    if is_error(run) {
      log.warn(format("Error running quick TCP nmap scan: %v", run))
      return []
    }

    return run.ports
  }

  fullScan := func(target) {
    log.msg(format("Scanning %s: all TCP ports", target))

    ports := quickScan(target)
    if len(ports) == 0 {
      log.msg(format("%s: No open ports", target))
      return
    }

    log.msg(format("Version scanning %v", ports))

    scanner := defaultScanner(target, args).
      privileged().
      oA(filepath.from_slash("recon/nmap-punched-tcp")).
      host_timeout("30m"). // Make an argument/configurable
      A().
      ports(ports...)
    
    run := scanner.run()
    check_err(run)
  }

  for target in targets { 
    baseDir := setupHost(target)

    err := os2.temp_chdir(baseDir, func(){
      if topPorts > 0 {
        topScan(target)
      } else {
        fullScan(target)
      }
    })
    check_err(err)
  }
})

// UDP Command

udpCmd := cobra.cmd("udp", "Run UDP scans")
rootCmd.add_command(udpCmd)

udpCmd.set_run(func(cmd, args){
  udpScanner := func(target) {
    return defaultScanner(target, args).
      privileged().
      sU().
      sV().
      min_rate(1000).
      max_rtt_timeout("100ms").
      version_intensity(0)
  }

  topScan := func(target) {
    log.msg(format("Scanning %s: top %d UDP ports", target, topPorts))
    scanner := udpScanner(target).
      top_ports(topPorts).
      oA(filepath.from_slash(format("recon/nmap-top-%d-udp", topPorts)))
    
    run := scanner.run()
    check_err(run)
  }

  fullScan := func(target) {
    log.msg(format("Scanning %s: all UDP ports", target))
    scanner := udpScanner(target).
      ports("-").
      oA(filepath.from_slash("recon/nmap-punched-udp"))
    
    run := scanner.run()
    check_err(run)
  }

  for target in targets {
    baseDir := setupHost(target)

    err := os2.temp_chdir(baseDir, func(){
      if topPorts > 0 {
        topScan(target)
      } else {
        fullScan(target)
      }
    })
    check_err(err)
  }
})

err := rootCmd()
check_err(err)
