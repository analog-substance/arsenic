#! /bin/bash
CHECK_ONLY=""
CMD=""
ARG_HOST=""
ARG_URL=""
ME=$0
if [ ! -z "$1" ]; then
  CMD="$1"
fi

if [ ! -z "$2" ]; then
  ARG_HOST="$2"
fi

if [ ! -z "$3" ]; then
  ARG_URL="$3"
fi

set -euo pipefail
WEB_PORTS="80|443|3000|8000|8001|8080|8443"

function getHostnames {
  SKIP_IP=0
  if ! grep -rP "\.amazonaws\.com|\.windows\.net" . > /dev/null 2>&1 ; then
    SKIP_IP=1
  fi

  if [ ! -z $SKIP_IP ] ; then
    rhost
  fi

  for file in hostname recon/hostnames.txt; do
    if [ -f "$file" ]; then
      cat "$file"
    fi
  done | sort -h | uniq |  while read domain; do
    if ! echo $domain | grep -P "\.amazonaws\.com|\.windows\.net$" > /dev/null; then
      echo $domain
    fi
  done
}

function scanHost {
  host="$1"
  url="$2"
  echo "[+] Checking $host $url"


  draft=$(grep draft "hosts/$host/README.md" || echo "nope")
  if [ "$draft" == "nope" ]; then
    cd "hosts/$host"
    output_file="gobuster.$(echo "$url" | sed "s/http\(s\)\?:\/\///" | sed 's/\//\./g').$wordlist_name.txt"

    # git pull
    if [ ! -f "recon/$output_file" ] ; then
      echo "[+] Scanning $host $url"
      if [ ! -z $CHECK_ONLY ]; then
        echo "$url"
      else
        # gobuster dir -e -k --random-agent -d -u $url -w ../../recon/gobuster-wordlist.txt -o "recon/gobuster-wordlist-$hostname-$port.txt" &
        set +o pipefail
        set +e
        arbuster -k -e -a Firefox -u $url -w $wordlist_file &
        pid=$!
        sleep 1
        git add .
        git commit -m "start gobuster $url"
        if ! git pull --rebase ; then
          git commit -am "wtf is this"
          git pull --rebase
      	fi

        git push

        if wait $pid; then
          echo good
          cd -
          ar-update-flags.sh git
          ar-update-flags.sh git
          cd -

          git add .
          git commit -m "gobuster end $url"
        if ! git pull --rebase ; then
          git commit -am "wtf is this"
          git pull --rebase
        fi
          git push
        else
          echo probably need to tweak gobuster flags
        fi
        set -e
        set -o pipefail
      fi
    fi
    cd - > /dev/null
  fi


  if [ $MANUAL -eq 0 ]; then
    ARGS=$(head -n1 <<<$($ME list))
    if [ ! -z "$ARGS" ] ; then
      ARG_HOST=$(echo "$ARGS" | awk '{print $1}')
      ARG_URL=$(echo "$ARGS" | awk '{print $2}')
      exec $ME scan $ARG_HOST $ARG_URL
    fi
  fi
}

function getHostUrls {
  # cloudflare and other cdns or prominent services
  REMOVE_IP_REGEX="(104\.(1[6-9]|2[0-9]|3[01])|184\.(2[4-9]|3[01])|104\.(6[4-9]|[7-9][0-9]|[12][0-9]{2})|23\.[01][0-5]?|96\.[67]|23\.(3[2-9]|[45][0-9]|6[0-7])|136\.147)\.[0-9]{1,3}\.[0-9]{1,3}"

  grep -lrP "$WEB_PORTS" hosts/*/recon/nmap* | cut -d/ -f2 | sort -h | uniq | ar-prune-blacklisted-domains | ar-prune-blacklisted-ips  | while read host; do
    if ! echo $host | grep -P $REMOVE_IP_REGEX > /dev/null; then
      echo $host
    fi
  done | while read host; do
    cd "hosts/$host"
    if grep -P "$WEB_PORTS" recon/nmap-* > /dev/null 2>&1; then
      grep -hroP "$WEB_PORTS" recon/nmap-* | sort -h | uniq | while read port; do
        getHostnames | while read hostname; do
          proto="http://"
          if echo $port | grep 443 > /dev/null 2>&1; then
             proto="https://"
          fi
          if [ "$port" == "80" ] || [ "$port" == "443" ] ; then
            url="${proto}${hostname}"
          else
            url="${proto}${hostname}:$port"
          fi
          output_file="gobuster.$(echo "$url" | sed "s/http\(s\)\?:\/\///" | sed 's/\//\./g').$wordlist_name.txt"

          if [ ! -f "recon/$output_file" ] ; then
            echo $host $url
          fi
        done
      done
    fi
    cd - > /dev/null
  done | sort -R
}

wordlist_file=$(realpath "recon/gobuster-initial.txt")
wordlist_name=`basename $wordlist_file`
wordlist_name="${wordlist_name%.*}"

if [ -z "$CMD" ] ; then
  echo "gobuster-next [ list | scan  [ hostname/ip url ]  ]"
  exit
fi

if [ "$CMD" == "list" ]; then
  getHostUrls
  exit
fi

if [ "$CMD" == "scan" ] ; then
  MANUAL=1
  if [ -z "$ARG_HOST" ] ; then
    MANUAL=0
    echo no args found, autodetecting
    ARGS=$(head -n1 <<<$($ME list))
    ARG_HOST=$(echo "$ARGS" | awk '{print $1}')
    ARG_URL=$(echo "$ARGS" | awk '{print $2}')
    echo "[!] Auto selected $ARG_HOST $ARG_URL"
  fi
  scanHost $ARG_HOST $ARG_URL
fi
