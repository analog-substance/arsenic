#! /bin/bash

set -euo pipefail
mkdir -p recon/domains recon/ips/ hosts

declare -a root_domain_commands=("whois" "ar-crtsh-slrp")
declare -a domain_commands=("host")
declare -a dig_commands=("TXT" "NS" "MX" "SOA" "A")
declare -a ip_commands=("whois")
REMOVE_DOMAIN_REGEX="(\._domainkey\.|hscoscdn10\.net|sites\.hubspot\.net|amazonaws\.com|azurewebsites\.net|azurewebsites\.windows\.net|cloudapp\.net|readthedocs\.io|my\.jobs|googlehosted\.com|readthedocs\.org)$"
PRIVATE_IP_REGEX="(127\.[0-9]{1,3}\.|10\.[0-9]{1,3}\.|192\.168\.|172\.(1[6-9]|2[0-9]|3[01])\.)[0-9]{1,3}\.[0-9]{1,3}"
REMOVE_IP_REGEX="(104\.(1[6-9]|2[0-9]|3[01])|184\.(2[4-9]|3[01])|104\.(6[4-9]|[7-9][0-9]|[12][0-9]{2})|23\.[01][0-5]?|96\.[67]|23\.(3[2-9]|[45][0-9]|6[0-7])|136\.147)\.[0-9]{1,3}\.[0-9]{1,3}"

function domain_recon {
  domain=$(echo $1 | tr 'A-Z' 'a-z')
  if echo "$domain" | grep -P "$REMOVE_DOMAIN_REGEX" > /dev/null ; then
    echo "[!] Skipping common domain: $domain" >&2
  else
    for cmd in "${domain_commands[@]}";  do
        $cmd $domain | tr 'A-Z' 'a-z' &
    done
    wait
  fi
}

function root_domain_recon {
  domain=$(echo $1 | tr 'A-Z' 'a-z')
  if echo "$domain" | grep -P "$REMOVE_DOMAIN_REGEX" > /dev/null ; then
    echo "[!] Skipping common domain: $domain"
  else
    mkdir -p "recon/domains/$domain"

    for cmd in "${root_domain_commands[@]}";  do
      if [ ! -f "recon/domains/$domain/$cmd.txt" ]; then
        echo "[+] running $domain $cmd"

        $cmd $domain | tr 'A-Z' 'a-z' > "recon/domains/$domain/$cmd.txt" &
      else
        echo "[!] skipping $domain $cmd"
      fi
    done
    for cmd in "${dig_commands[@]}";  do
      if [ ! -f "recon/domains/$domain/dig-$cmd.txt" ]; then
        echo "[+] running dig $domain $cmd"

        dig $cmd $domain | tr 'A-Z' 'a-z' > "recon/domains/$domain/dig-$cmd.txt" &
      else
        echo "[!] skipping dig $domain $cmd"
      fi
    done
    wait
  fi
}

# Right now just gonna ignore these.
NON_ROOT_DOMAIN_REGEX="co\.|com\."
function getRootDomains {
  ## Lets get a unique list of root domains
  # cat all domains
  # remove *. prefix
  # remove email addr prefixes
  # remove problematic domains
  # print last 2 octets in the domain
  # remove things like co.uk, com.uk
  cat scope-domains-* \
  | removeInvalidThings \
  | awk -F. '{print $(NF-1) "." $NF}' \
  | grep -vP "$NON_ROOT_DOMAIN_REGEX" \
  | sort -u \
  | tee scope-root-domains.txt
}

function getAllDomains {
  # create a combined scope file
  cat scope-domains-* \
    | removeInvalidThings \
    | tee scope-domains-combined.txt
}

function removeInvalidThings {
  # remove *. prefix
  # remove email addr prefixes
  # remove IP addrs
  # remove IPv6 addrs
  # remove domain regex
  sed 's/^\*\.//g' \
  | sed 's/^[^@]\+@//g' \
  | tr 'A-Z' 'a-z' \
  | grep -vP "^([0-9]{1,3}\.){3}[0-9]{1,3}$" \
  | grep -vP "$REMOVE_DOMAIN_REGEX" \
  | grep -P '^[a-z0-9_\-\.]+$' \
  | ar-prune-blacklisted-domains \
  | sort -u
}

# Recon root domains
getRootDomains | while read domain; do
  root_domain_recon "$domain"
done

# now that we have all our root domains and hopefully subdomains from crtsh
# add the newly discover subdomains to a new scope file :D
cat recon/domains/*/ar-crtsh-slrp.txt \
  | tr 'A-Z' 'a-z' \
  | sed 's/^\*\.//g' \
  | ar-prune-blacklisted-domains \
  | sort -u \
  | grep -vP "$REMOVE_DOMAIN_REGEX" > scope-domains-ar-crtsh-slrp.txt

# create combined scope domains file
getAllDomains >&2

# check for magic
if which fast-resolv > /dev/null 2>&1; then
  fast-resolv -d scope-domains-combined.txt | tee recon/domains/resolv-domains.txt
  cat recon/domains/resolv-domains.txt | sort > sorted
  mv sorted recon/domains/resolv-domains.txt
else
  # sad no magic found
  #
  cat scope-domains-combined.txt | while read domain; do
    domain_recon "$domain"
  done | tee recon/domains/resolv-domains.txt
fi

# create scope ips from domains
grep -riP "has (IPv6 )?address" recon/domains/  \
  | awk '{print $NF}' \
  | sort -u \
  | grep -vP "$REMOVE_IP_REGEX" \
  | tee scope-ips-client-domains.txt


## maybe this should be in the IPs?
cat scope-ips-* | sort -u > scope-ips-combined.txt

# Create IP Scope files for public and private addresses
cat scope-ips-combined.txt | grep -vP "^$PRIVATE_IP_REGEX\$" | grep -v ":" | sort -u > scope-ips-public-ipv4.txt


# there has to be a better way. we dont want the scrip to exit if there are no matches
set +e
cat scope-ips-combined.txt | grep -vP "^$PRIVATE_IP_REGEX\$" | grep ":" | sort -u > scope-ips-public-ipv6.txt
cat scope-ips-combined.txt | grep -P "^$PRIVATE_IP_REGEX\$" | sort -u > scope-ips-private-ipv4.txt
set -e

if which fast-resolv > /dev/null; then
  fast-resolv -d scope-ips-public*.txt | tee recon/ips/resolv-ips.txt
  cat recon/ips/resolv-ips.txt | sort > sorted
  mv sorted recon/ips/resolv-ips.txt
else
  cat scope-ips-public*.txt | xargs -n1 host | tee recon/ips/resolv-ips.txt
  cat recon/ips/resolv-ips.txt | sort > sorted
  mv sorted recon/ips/resolv-ips.txt
fi

cat recon/ips/resolv-ips.txt

grep -P "(is an alias|has (IPv6 )?address)" recon/domains/resolv-domains.txt | awk '{print $1}' | sort -u > scope-domains-discovered-pointed.txt

echo Combined Domains: $(cat scope-domains-combined.txt | wc -l)
echo Pointed Domains: $(cat scope-domains-discovered-pointed.txt | wc -l)
echo Combined IPs: $(cat scope-ips-combined.txt | wc -l)
echo Public IPs: $(cat scope-ips-public*.txt | wc -l)
echo Private IPs: $(cat scope-ips-private*.txt | wc -l)
