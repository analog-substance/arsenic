#!/usr/bin/env arsenic

fmt := import("fmt")
os := import("os")
filepath := import("filepath")
slice := import("slice")
arsenic := import("arsenic")
script := import("script")
log := import("log")
git := import("git")
exec := import("exec")
cobra := import("cobra")


getHosts := func(flags) {
  err := git.pull()
  if is_error(err) {
    script.stop(err)
  }
  
  hosts := []
  allHosts := arsenic.hosts(flags)
  if is_error(allHosts) {
    script.stop(allHosts)
  }

  for host in allHosts {
    if !host.has_any_port() {
      continue
    }
    
    files := host.files(filepath.from_slash("recon/nuclei-technologies.txt"))
    if len(files) > 0 {
      continue
    }

    hosts = append(hosts, host)
  }

  return hosts
}

flags := []

rootCmd := cobra.root_cmd("as-nuclei-technologies.tengo", "Run Nuclei technology templates against current scope")
rootCmd.persistent_flags.string_slicep("flags", "f", [], "Filter hosts by flags")

rootCmd.set_persistent_pre_run(func(cmd, args) {
  flags = cmd.flags.get_string_slice("flags")

  err := git.pull()
  if is_error(err) {
    script.stop(err)
  }
})

listCmd := cobra.cmd("list", "Run Nuclei technology templates on hosts that need it.")
rootCmd.add_command(listCmd)

listCmd.set_run(func(cmd, args) {
	hosts := getHosts(flags)
  for host in hosts {
    fmt.println(host.name)
  }
})

runCmd := cobra.cmd("run", "Lists the hosts that need to run the Nuclei technology templates.")
runCmd.flags.stringp("host", "H", "", "Host to run templates on.")
runCmd.flags.stringp("proxy", "p", "", "The http/socks5 proxy to use")
rootCmd.add_command(runCmd)

runCmd.set_run(func(cmd, args) {
  targetHost := undefined
  targetHostName := cmd.flags.get_string("host")
  proxy := cmd.flags.get_string("proxy")

  manual := targetHostName != ""

  autoSelect := func() {
    targetHost = slice.rand_item(getHosts(flags))
    if !targetHost {
      script.stop("No host found")
    }
    
    log.warn(format("Auto selected %s", targetHost.name))
  }

  runTemplates := func(host) {
    if !host {
      return
    }

    log.msg(format("Nuclei / Technologies / %s/ checking", host.name))

    reconPath := filepath.join(host.dir, "recon")

    files := host.files(filepath.join(reconPath, "nuclei-technologies.txt"))
    if is_error(files) {
      script.stop(files)
    }

    if len(files) != 0 {
      return
    }

    log.info(format("Nuclei / Technologies / %s / preparing", host.name))

    os.mkdir_all(reconPath, 0755)

    outputName := filepath.join(reconPath, "nuclei-technologies.txt")

    err := git.lock(outputName, format("Nuclei Technologies lock: %s", host.name))
    if is_error(err) {
      script.stop(err)
    }

    log.info(format("Nuclei / Technologies / %s / running", host.name))

    nucleiArgs := ["nuclei", "-project", "-t", "technologies", "-o", outputName]
    if proxy != "" {
      nucleiArgs = append(nucleiArgs, "-p", proxy)
    }

    hostURLs := host.urls()
    if is_error(hostURLs) {
      script.stop(hostURLs)
    }

    for u in hostURLs {
      nucleiArgs = append(nucleiArgs, "-u", u)
    }

    err = exec.run_with_sig_handler(nucleiArgs...)
    if is_error(err) {
      script.stop(err)
    }

    err = git.commit(".", format("Nuclei Technologies complete: %s", host.name))
    if is_error(err) {
      script.stop(err)
    }

    log.info(format("Nuclei / Technologies / %s / complete", host.name))
  }

  if manual {
    targetHost = arsenic.host(targetHostName)
    if is_error(targetHost) {
      script.stop(targetHost)
    }
  } else {
    log.warn("no args found, autodetecting")

    autoSelect()
  }

  for {
    runTemplates(targetHost)

    if manual {
      break
    }

    autoSelect()
  }
})

err := rootCmd()
if is_error(err) {
	script.stop(err)
}
