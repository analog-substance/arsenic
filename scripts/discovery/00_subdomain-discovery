#! /bin/bash

mkdir -p recon/domains recon/discovery recon/ips

declare -a root_domain_commands=("whois")
declare -a domain_commands=("host")
declare -a dig_commands=("TXT" "NS" "MX" "SOA" "A")
declare -a ip_commands=("whois")

REMOVE_DOMAIN_REGEX="(\._domainkey\.|hscoscdn10\.net|sites\.hubspot\.net|amazonaws\.com|azurewebsites\.net|azurewebsites\.windows\.net|azure\.com|cloudapp\.net|readthedocs\.io|my\.jobs|googlehosted\.com|readthedocs\.org)$"

# Right now just gonna ignore these.
NON_ROOT_DOMAIN_REGEX="co\.|com\."
function getRootDomains {
  ## Lets get a unique list of root domains
  # cat all domains
  # remove *. prefix
  # remove email addr prefixes
  # remove problematic domains
  # print last 2 octets in the domain
  # remove things like co.uk, com.uk
  cat scope-domains* \
  | removeInvalidThings \
  | awk -F. '{print $(NF-1) "." $NF}' \
  | grep -vP "$NON_ROOT_DOMAIN_REGEX" \
  | sort -h | uniq \
  | tee scope-domains-root.txt
}

function getAllDomains {
  # create a combined scope file
    cat scope-domains* \
    | removeInvalidThings \
    | cat - scope-domains.txt \
    | sort -h |  uniq \
    | tee scope-domains-combined.txt
}

function removeInvalidThings {
  # remove *. prefix
  # remove email addr prefixes
  # remove IP addrs
  # remove IPv6 addrs
  # remove domain regex
  sed 's/^\*\.//g' \
  | sed 's/^[^@]\+@//g' \
  | tr 'A-Z' 'a-z' \
  | grep -vP "^([0-9]{1,3}\.){3}[0-9]{1,3}$" \
  | grep -vP "$REMOVE_DOMAIN_REGEX" \
  | grep -P '^[a-z0-9_\-\.]+$' \
  | as-prune-blacklisted-domains \
  | sort -h | uniq
}

function domain_recon {
  domain=$(echo $1 | tr 'A-Z' 'a-z')
  if echo "$domain" | grep -P "$REMOVE_DOMAIN_REGEX" > /dev/null ; then
    echo "[!] Skipping common domain: $domain" >&2
  else
    for cmd in "${domain_commands[@]}";  do
        $cmd $domain | tr 'A-Z' 'a-z' &
    done
    wait
  fi
}

function root_domain_recon {
  domain=$(echo $1 | tr 'A-Z' 'a-z')
  if echo "$domain" | grep -P "$REMOVE_DOMAIN_REGEX" > /dev/null ; then
    echo "[!] Skipping common domain: $domain"
  else
    mkdir -p "recon/domains/$domain"

    for cmd in "${root_domain_commands[@]}";  do
      if [ ! -f "recon/domains/$domain/$cmd.txt" ]; then
        echo "[+] running $domain $cmd"

        $cmd $domain | tr 'A-Z' 'a-z' > "recon/domains/$domain/$cmd.txt" &
      else
        echo "[!] skipping $domain $cmd"
      fi
    done
    for cmd in "${dig_commands[@]}";  do
      if [ ! -f "recon/domains/$domain/dig-$cmd.txt" ]; then
        echo "[+] running dig $domain $cmd"

        dig $cmd $domain | tr 'A-Z' 'a-z' > "recon/domains/$domain/dig-$cmd.txt" &
      else
        echo "[!] skipping dig $domain $cmd"
      fi
    done
    wait
  fi
}

function ensureInScope {
  grep -P "^$(echo $(cat scope-domains.txt | sed 's/\./\\./g;s/^/(.+\\.)?/g') | sed 's/ /|/g')$"
}

getRootDomains > /dev/null

RECON_FILE="recon/discovery/amass-enum-active.txt"
if [ ! -f "$RECON_FILE" ] ; then
  amass enum -src -active -d $(echo $(cat scope-domains-root.txt | sort -u) | sed 's/ /,/g') \
  | tee "$RECON_FILE"
fi

cat "$RECON_FILE" \
| awk '{print $2}' \
| ensureInScope \
| sort -h \
| uniq \
| tee scope-domains-amass-enum-active.txt


# RECON_FILE="recon/discovery/amass-intel-whois.txt"
# if [ ! -f "$RECON_FILE" ] ; then
#   amass intel -d $(echo $(cat scope-domains* | sort -u) | sed 's/ /,/g') -whois \
#   | tee "$RECON_FILE"
# fi
#
# cat "$RECON_FILE" \
# | ensureInScope \
# | sort -h \
# | uniq \
# | tee scope-domains-amass-intel-whois.txt


RECON_FILE="recon/discovery/amass-intel-active.txt"
if [ ! -f "$RECON_FILE" ] ; then
  amass intel -d $(echo $(cat scope-domains-root.txt | sort -u) | sed 's/ /,/g') -active \
  | tee "$RECON_FILE"
fi

cat "$RECON_FILE" \
| ensureInScope \
| sort -h \
| uniq \
| tee scope-domains-amass-intel-active.txt

getAllDomains > /dev/null

# Recon root domains
getRootDomains | while read domain; do
  root_domain_recon "$domain"
done

getAllDomains
