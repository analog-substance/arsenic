fmt := import("fmt")
text := import("text")
os := import("os")
filepath := import("filepath")
slice := import("slice")
arsenic := import("arsenic")
url := import("url")
script := import("script")
times := import("times")
log := import("log")
rand := import("rand")
git := import("git")
exec := import("exec")
os2 := import("os2")

manual := true
xslRegex := text.re_compile(`"[^"]*nmap\.xsl"`)

action := "scan"
if args.action {
  action = args.action
}

argHost := undefined
if args.host {
  argHost = arsenic.host(args.host)
  if is_error(argHost) {
    script.stop(argHost)
  }
}

flags := []
if args.flags {
  flags = text.split(args.flags, ",")
}

getHosts := func() {
  err := git.pull()
  if is_error(err) {
    script.stop(err)
  }
  
  hosts := []
  allHosts := arsenic.hosts()
  if is_error(allHosts) {
    script.stop(allHosts)
  }

  for host in allHosts {
    files := host.files(filepath.join("recon", "nmap*udp*"))
    if len(files) > 0 {
      continue
    }

    hosts = append(hosts, host)
  }

  return hosts
}

scanHost := func(host) {
  if !host {
    return
  }

  log.msg(format("Port Scan / UDP / %s/ checking", host.name))

  reconPath := filepath.join(host.dir, "recon")

  files := host.files(filepath.join(reconPath, "nmap*udp*"))
  if is_error(files) {
    script.stop(files)
  }

  if len(files) != 0 {
    return
  }

  log.info(format("Port Scan / UDP / %s / preparing", host.name))

  os.mkdir_all(reconPath, 0755)

  err := git.lock(filepath.join(reconPath, "nmap-punched-quick-udp.nmap"), format("UDP port scan lock: %s", host.name))
  if is_error(err) {
    script.stop(err)
  }

  previousDir := os.getwd()
  if is_error(previousDir) {
    script.stop(previousDir)
  }

  err = os.chdir(host.dir)
  if is_error(err) {
    script.stop(err)
  }

  log.info(format("Port Scan / UDP / %s / running", host.name))

  err = exec.run_with_sig_handler("sudo", "nmap", "-oA", "recon/nmap-punched-udp", "-sUV", "-p-", "-Pn", "--max-rtt-timeout", "100ms", "--min-rate", "1000", "--version-intensity", "0", host.name)
  if is_error(err) {
    script.stop(err)
  }

  xmlFile := filepath.join("recon", "nmap-punched-udp.xml")
  bytes := os.read_file(xmlFile)
  if is_error(bytes) {
    script.stop(bytes)
  }

  output := xslRegex.replace(string(bytes), `"/static/nmap.xsl"`)
  err = os2.write_file(xmlFile, output)
  if is_error(err) {
    script.stop(err)
  }

  // err = arsenic.udp_scan(host)
  // if is_error(err){
  //   script.stop(err)
  // }

  err = git.commit(".", format("UDP port scan complete: %s", host.name))
  if is_error(err) {
    script.stop(err)
  }

  err = os.chdir(previousDir)
  if is_error(err){
    script.stop(err)
  }

  log.info(format("Port Scan / UDP / %s / complete", host.name))
}

if action == "list" {
  hosts := getHosts()
  for host in hosts {
    fmt.println(host.name)
  }
  script.stop()
}

autoSelect := func() {
  argHost = slice.rand_item(getHosts())
  if !argHost {
    files := arsenic.locked_files("hosts/*/recon/nmap-punched-quick-udp.nmap")
    if is_error(files) {
      script.stop(files)
    }

    if len(files) > 0 {
      log.warn("other UDP port scans are still running... lets wait before continuing")
      script.stop()
    }

    script.stop("No host found")
  }
  
  log.warn(format("Auto selected %s", argHost.name))
}

if !argHost {
  manual = false
  log.warn("no args found, autodetecting")

  autoSelect()
}

for {
  scanHost(argHost)
  if manual {
    break
  }

  autoSelect()
}