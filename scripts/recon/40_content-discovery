#! /bin/bash
CHECK_ONLY=""
CMD=""
ARG_HOST=""
ARG_URL=""
ME=$0
if [ ! -z "$1" ]; then
  CMD="$1"
fi

if [ ! -z "$2" ]; then
  ARG_HOST="$2"
fi

if [ ! -z "$3" ]; then
  ARG_URL="$3"
fi

if [ -z "$CMD" ] ; then
  CMD="scan"
fi

GIT=1
if [ ! -d .git ]; then
  GIT=0
fi


#set -euo pipefail
set -eu
# set -x
WEB_PORTS="(80|443|3000|8000|8001|8080|8443)"
WEB_PORT_REGEX="portid=\"$WEB_PORTS\"|tcp/$WEB_PORTS"


function gitPull {
  if [ $GIT -eq 1 ]; then
    if ! git pull > /dev/null 2>&1 ; then
      echo "[!] pull failed" >&2
    fi
  fi
}

function gitCommit {
  if [ $GIT -eq 1 ]; then
    path="$1"
    msg="$2"
    git add "$path"

    if git commit -m "$msg" ; then
      if ! git pull --rebase ; then
        git commit -am "wtf is this..."
        git pull --rebase
      fi
      git push
    else
      echo "nothing happened"
    fi
  fi
}

function newGetHostUrls {
  cat hosts/*/recon/*hostnames.txt \
  | sort -u \
  | as-prune-blacklisted-domains \
  | grep -vP "(//((sso\.|scm\.)?azurewebsites\.net|(sso\.|scm\.)?azure\-mobile\.net|s3\.amazonaws\.com)$)|((\.secureserver\.net|\.microsoftonline\.com|windows\.net|amazonaws\.com|hscoscdn)$)"  \
  | while read hostname; do

    host=$(grep -rP "^$(echo $hostname | sed 's/\./\\./g')$" hosts/*/recon/*hostnames.txt | head -n1 | cut -d/ -f2)

    if [ -z "$host" ]; then
      echo "no host found for hostname: $hostname"
    fi

    draft="nope"
    if [ -f "hosts/$host/00_metadata.md" ] ; then
      draft=$(grep draft "hosts/$host/00_metadata.md" || echo "nope")
    fi
    if [ "$draft" == "nope" ]; then

      if grep -P "$WEB_PORT_REGEX" hosts/$host/recon/nmap-* > /dev/null 2>&1; then
        grep -P "$WEB_PORT_REGEX" hosts/$host/recon/nmap-* | grep -hoP "$WEB_PORTS" | sort -h | uniq | while read port; do
          SHOULD_ECHO=1
          proto="http://"
          if echo $port | grep 443 > /dev/null 2>&1; then
             proto="https://"
          fi
          if [ "$port" == "80" ] || [ "$port" == "443" ] ; then
            url="${proto}${hostname}"
            if [ "$port" == "80" ] ; then
              if grep -P "\b443\b" hosts/$host/recon/nmap-* >/dev/null 2>&1 ; then
                # this is port 80, but 443 is listening. lets use that instead
                SHOULD_ECHO=0
              fi
            fi
          else
            url="${proto}${hostname}:$port"
          fi

          if [ $SHOULD_ECHO -eq 1 ]; then
            output_file="gobuster.$(echo "$url" | sed "s/:\/\//./" | sed 's/\//\./g').$wordlist_name.txt"
            if [ ! -f "hosts/$host/recon/$output_file" ] ; then
              echo $host $url
            fi
          fi
        done
      fi
    fi
  done | sort -h | uniq
}

function getHostnames {
  SKIP_IP=0
  if ! grep -rP "\.amazonaws\.com|\.windows\.net" . > /dev/null 2>&1 ; then
    SKIP_IP=1
  fi

  if [ ! -z $SKIP_IP ] ; then
    rhost
  fi

  for file in hostname recon/hostnames.txt; do
    if [ -f "$file" ]; then
      cat "$file"
    fi
  done | sort -h | uniq |  while read domain; do
    if ! echo $domain | grep -P "\.amazonaws\.com|\.windows\.net$" > /dev/null; then
      echo $domain
    fi
  done
}

function scanHost {
  set +u
  host="$1"
  url="$2"
  set -u

  echo "[+] Checking $host $url"

  draft="nope"
  if [ -f "hosts/$host/00_metadata.md" ] ; then
    draft=$(grep draft "hosts/$host/00_metadata.md" || echo "nope")
  fi
  if [ "$draft" == "nope" ]; then
    cd "hosts/$host"
    output_file="gobuster.$(echo "$url" | sed "s/:\/\//./" | sed 's/\//\./g').$wordlist_name.txt"

    gitPull
    if [ ! -f "recon/$output_file" ] ; then
      echo "[+] Scanning $host $url"
      if [ ! -z $CHECK_ONLY ]; then
        echo "$url"
      else
        # gobuster dir -e -k --random-agent -d -u $url -w ../../recon/gobuster-wordlist.txt -o "recon/gobuster-wordlist-$hostname-$port.txt" &

        # If the host points to an S3 bucket, we don't want to gobuster it
        if curl -sIL $host | grep -q "https://aws.amazon.com/s3/"; then
          echo "s3" > $output_file
        else
          echo lock > "recon/$output_file"
          gitCommit "." "start gobuster $url"

          set +o pipefail
          set +e

          as-buster -k -e -a Firefox -u $url -w $wordlist_file
        fi

        gitCommit "." "end gobuster $url"
        set -e
        set -o pipefail
      fi
    fi
    cd - > /dev/null
  fi

  if [ $MANUAL -eq 0 ]; then
    ARGS=$(head -n1 <<<$($ME list | grep -v "no host found"))
    if [ ! -z "$ARGS" ] ; then
      ARG_HOST=$(echo "$ARGS" | awk '{print $1}')
      ARG_URL=$(echo "$ARGS" | awk '{print $2}')
      exec $ME scan
    fi
    if grep lock hosts/*/recon/gobuster.* > /dev/null; then
      exit 1
    fi
  fi
}

if [ ! -f "recon/wordlist-content-discovery.txt" ]; then
  as-wordlist content-discovery > "recon/wordlist-content-discovery.txt"
fi

wordlist_file=$(realpath "recon/wordlist-content-discovery.txt")
wordlist_name=`basename $wordlist_file`
wordlist_name="${wordlist_name%.*}"

if [ -z "$CMD" ] ; then
  echo "gobuster-next [ list | scan  [ hostname/ip url ]  ]"
  exit
fi

if [ "$CMD" == "list" ]; then
  newGetHostUrls
  exit
fi

if [ "$CMD" == "scan" ] ; then
  MANUAL=1
  if [ -z "$ARG_HOST" ] ; then
    MANUAL=0
    echo no args found, autodetecting
    ARGS=$(head -n1 <<<$($ME list | grep -v "no host found" | sort -R))
    ARG_HOST=$(echo "$ARGS" | awk '{print $1}')
    ARG_URL=$(echo "$ARGS" | awk '{print $2}')
    if [ "$ARG_HOST" == "" ]; then
      if grep lock hosts/*/recon/gobuster.* > /dev/null; then
        exit 1
      fi
      exit
    fi
    echo "[!] Auto selected $ARG_HOST $ARG_URL"
  fi
  scanHost $ARG_HOST $ARG_URL
fi
