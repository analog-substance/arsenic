#!/usr/bin/env arsenic

fmt := import("fmt")
text := import("text")
os := import("os")
filepath := import("filepath")
slice := import("slice")
arsenic := import("arsenic")
url := import("url")
script := import("script")
times := import("times")
log := import("log")
rand := import("rand")
git := import("git")
cobra := import("cobra")

getHosts := func(flags) {
  err := git.pull()
  check_err(err)
  
  hosts := []
  allHosts := arsenic.hosts(flags)
  check_err(allHosts)

  for host in allHosts {
    files := host.files(filepath.from_slash("recon/nmap-punched*tcp*"))
    if len(files) > 0 {
      continue
    }

    hosts = append(hosts, host)
  }

  return hosts
}

flags := []

rootCmd := cobra.root_cmd(script.name, "Run nmap TCP scans on current scope")
rootCmd.persistent_flags.string_slicep("flags", "f", [], "Filter hosts by flags")
rootCmd.add_disable_git_flag()

rootCmd.set_persistent_pre_run(func(cmd, args) {
  flags = cmd.flags.get_string_slice("flags")

  err := git.pull()
  check_err(err)
})

listCmd := cobra.cmd("list", "Lists the hosts that need nmap TCP scans.")
rootCmd.add_command(listCmd)

listCmd.set_run(func(cmd, args) {
	hosts := getHosts(flags)
  for host in hosts {
    fmt.println(host.name)
  }
})

scanCmd := cobra.cmd("scan", "Scan hosts that need nmap TCP scans.")
scanCmd.flags.stringp("host", "H", "", "Host to scan.")
rootCmd.add_command(scanCmd)

scanCmd.set_run(func(cmd, args) {
  targetHost := undefined
  targetHostName := cmd.flags.get_string("host")

  manual := targetHostName != ""

  autoSelect := func() {
    targetHost = slice.rand_item(getHosts(flags))
    if !targetHost {
      files := arsenic.locked_files("hosts/*/recon/nmap-punched-quick-tcp.nmap")
      check_err(files)

      if len(files) > 0 {
        log.warn("other TCP port scans are still running... lets wait before continuing")
        script.stop()
      }

      script.stop("No host found")
    }
    
    log.warn(format("Auto selected %s", targetHost.name))
  }

  scanHost := func(host) {
    if !host {
      return
    }

    log.msg(format("Port Scan / TCP / %s/ checking", host.name))

    reconPath := filepath.join(host.dir, "recon")

    files := host.files(filepath.join(reconPath, "nmap-punched*tcp*"))
    check_err(files)

    if len(files) != 0 {
      return
    }

    log.info(format("Port Scan / TCP / %s / preparing", host.name))

    os.mkdir_all(reconPath, 0755)

    err := git.lock(filepath.join(reconPath, "nmap-punched-quick-tcp.nmap"), format("TCP port scan lock: %s", host.name))
    check_err(err)

    previousDir := os.getwd()
    check_err(previousDir)

    err = os.chdir(host.dir)
    check_err(err)

    log.info(format("Port Scan / TCP / %s / running", host.name))

    err = script.run_script_with_sig_handler("as-recon-discover-services.tengo", "tcp", "-t", host.name)
    check_err(err)

    err = git.commit(".", format("TCP port scan complete: %s", host.name))
    check_err(err)

    err = os.chdir(previousDir)
    check_err(err)

    log.info(format("Port Scan / TCP / %s / complete", host.name))
  }

  if manual {
    targetHost = arsenic.host(targetHostName)
    check_err(targetHost)
  } else {
    log.warn("no args found, autodetecting")

    autoSelect()
  }

  for {
    scanHost(targetHost)

    if manual {
      break
    }

    autoSelect()
  }
})

err := rootCmd()
check_err(err)
