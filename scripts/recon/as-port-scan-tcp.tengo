#!/usr/bin/env arsenic

fmt := import("fmt")
text := import("text")
os := import("os")
filepath := import("filepath")
slice := import("slice")
arsenic := import("arsenic")
url := import("url")
script := import("script")
times := import("times")
log := import("log")
rand := import("rand")
git := import("git")
math := import("math")
cobra := import("cobra")

getHosts := func(flags) {
  err := git.pull()
  check_err(err)
  
  hosts := []
  allHosts := arsenic.hosts(flags)
  check_err(allHosts)

  for host in allHosts {
    files := host.files(filepath.from_slash("recon/nmap-*tcp*"))
    if len(files) > 0 {
      continue
    }

    hosts = append(hosts, host)
  }

  return hosts
}

flags := []

rootCmd := cobra.root_cmd(script.name, "Run nmap TCP scans on current scope")
rootCmd.persistent_flags.string_slicep("flags", "f", [], "Filter hosts by flags")
rootCmd.add_disable_git_flag()

rootCmd.set_persistent_pre_run(func(cmd, args) {
  flags = cmd.flags.get_string_slice("flags")

  // err := git.pull()
  // check_err(err)
})

listCmd := cobra.cmd("list", "Lists the hosts that need nmap TCP scans.")
rootCmd.add_command(listCmd)

listCmd.set_run(func(cmd, args) {
	hosts := getHosts(flags)
  for host in hosts {
    fmt.println(host.name)
  }
})

scanCmd := cobra.cmd("scan", "Scan hosts that need nmap TCP scans.")
scanCmd.flags.stringp("host", "H", "", "Host to scan.")
rootCmd.add_command(scanCmd)
rootCmd.set_run(scanCmd)

scanCmd.set_run(func(cmd, args) {
  targetHost := undefined
  targetHostName := cmd.flags.get_string("host")

  manual := targetHostName != ""

  autoSelect := func() {
    targetHost = slice.rand_item(getHosts(flags))
    if !targetHost {
      files := arsenic.locked_files("hosts/*/recon/nmap-quick-tcp.nmap")
      check_err(files)

      if len(files) > 0 {
        log.warn("other TCP port scans are still running... lets wait before continuing")
        script.stop()
      }

      script.stop("No host found")
    }
    
    log.warn(format("Auto selected %s", targetHost.name))
  }

  scanHost := func(host) {
    if !host {
      return
    }

    log.msg(format("Port Scan / TCP / %s/ checking", host.name))

    reconPath := filepath.join(host.dir, "recon")

    files := host.files(filepath.join(reconPath, "nmap-*tcp*"))
    check_err(files)

    if len(files) != 0 {
      return
    }

    log.info(format("Port Scan / TCP / %s / preparing", host.name))

    os.mkdir_all(reconPath, 0755)

    err := git.lock(filepath.join(reconPath, "nmap-quick-tcp.nmap"), format("TCP port scan lock: %s", host.name))
    check_err(err)

    previousDir := os.getwd()
    check_err(previousDir)

    err = os.chdir(host.dir)
    check_err(err)

    log.info(format("Port Scan / TCP / %s / running", host.name))

    err = script.run_script_with_sig_handler("as-recon-discover-services.tengo", "tcp", "-t", host.name)
    check_err(err)

    err = git.commit(".", format("TCP port scan complete: %s", host.name))
    check_err(err)

    err = os.chdir(previousDir)
    check_err(err)

    log.info(format("Port Scan / TCP / %s / complete", host.name))
  }

  if manual {
    targetHost = arsenic.host(targetHostName)
    check_err(targetHost)
  } else {
    log.warn("no args found, autodetecting")

    autoSelect()
  }

  for {
    scanHost(targetHost)

    if manual {
      break
    }

    autoSelect()
  }
})



incrementalCmd := cobra.cmd("incremental", "Perform incremental port scans against the scope [WIP]")
incrementalCmd.flags.stringp("scope-file", "s", "scope-ips.txt", "scope file to use")
incrementalCmd.flags.intp("port-count", "p", 5000, "number of ports to scan")
incrementalCmd.flags.intp("batch", "b", 1, "what batch to scan (1 = ports 1-[port-count], 2 = [port-count + 1] - [port-count * batch])")
rootCmd.add_command(incrementalCmd)

/*

**This is a WIP...**

Goals:
  [x] Incrementally scan scope starting with popular ports first, then scan other ports.
  [ ] Specify what batch ranges/numbers to execute
  [ ] Allow custom nmap args
  [ ] Allow quick timing template selection
*/

incrementalCmd.set_run(func(cmd, args) {

  // nmap -Pn -n -sS -p- -sV --min-hostgroup 255 --min-rtt-timeout 25ms --max-rtt-timeout 100ms --max-retries 1 --max-scan-delay 0 --min-rate 1000 -vvv --open -iL <alive_hosts_file> -oA <OUT_FILE>

  getNmapPortsByPopularityCmd := "sort -r -k3 /usr/share/nmap/nmap-services | awk '{print $2}' | grep '/tcp' | cut -d/ -f1"
  maxPortNum :=  65535
  scopeFile := cmd.flags.get_string("scope-file")
  ports := cmd.flags.get_int("port-count")
  startBatch := cmd.flags.get_int("batch")

  cmd := os.exec("bash", "-c", getNmapPortsByPopularityCmd)
  check_err(cmd)
  nmapPortsStr := cmd.output()
  nmapPorts := []

  if len(nmapPortsStr) > 0 {
    nmapPorts = text.split(text.trim_space(nmapPortsStr), "\n")
  }

  nmapPopularityCount := len(nmapPorts)
  popularBatches := int(math.ceil(nmapPopularityCount / ports)) + 1

  stdBatchCount := int(math.ceil(maxPortNum / ports)) + 1

  totalBatches := popularBatches + stdBatchCount

  log.msg(format("batch info: %d / %d / %d", popularBatches, stdBatchCount, totalBatches))


  for batch := startBatch; batch <= totalBatches; batch++ {

    portArg := ""
    excludePortArg := ""
    portsToCheck := ""
    excludePorts := []

    if batch <= popularBatches {
      batchStart := ((batch - 1) * ports)
      batchEnd := batchStart + ports

      if ports < nmapPopularityCount {
        log.msg(format("Less ports than nmap services popularity: %d", nmapPopularityCount))
        portsToCheck := nmapPorts[batchStart:batchEnd]
        portArg = text.join(portsToCheck, ",")
      } else {
        log.msg(format("More ports than nmap services popularity: %d", nmapPopularityCount))
        portArg = text.join(nmapPorts, ",")
      }
    } else {

      // going through all the port ranges now
      realBS := ((batch - 1 - popularBatches) * ports) + 1
      realBE := realBS + ports - 1

      if realBE > maxPortNum {
        realBE = maxPortNum
      }

      portArg = format("%d-%d", realBS, realBE)

      log.msg(format("realBS: %d", realBS))

      for _, p in nmapPorts {
        portInt := int(p)
        if realBS < portInt && realBE > portInt {
          excludePorts = append(excludePorts, portInt)
        }
      }

      excludePortArg = text.join(excludePorts, ",")
    }

    scopeName := text.re_replace("[^0-9a-zA-Z_-]", scopeFile, "-")
    outFile := format("recon/nmap/tcp-incremental-%d-%s-%d", ports, scopeName, batch)
    os.mkdir_all("recon/nmap/")

    tackP := format("-p%s", portArg)

    nmapCmd := [
      "nmap",
      "-Pn",
      "-n",
      "-sS",
      tackP,
      "-sV",
      "--min-hostgroup",
      "255",
      "--min-rtt-timeout",
      "25ms",
      "--max-rtt-timeout",
      "100ms",
      "--max-retries",
      "1",
      "--max-scan-delay",
      "0",
      "--min-rate",
      "1000",
      "-vvv",
      "--open",
      "--resolve-all",
      "-iL",
      scopeFile,
      "-oA",
      outFile
    ]

    if excludePortArg != "" {
      log.msg(format("appending exclude ports: %s", excludePortArg))
      nmapCmd = append(nmapCmd, "--exclude-ports", excludePortArg)
    }

    log.msg(text.join(nmapCmd, " "))

    progress := int((math.abs(batch) /  math.abs(totalBatches)) * 100)
    log.msg(format("Starting batch: %d of %d (%d%%)", batch, totalBatches, progress))

    ncmd := os.exec(nmapCmd...)

    ncmdOut := ncmd.output()
    check_err(ncmd)
    log.msg(ncmdOut)
  }
})


err := rootCmd()
check_err(err)
