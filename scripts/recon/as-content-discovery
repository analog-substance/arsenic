#! /bin/bash

####
## BEGIN: Load common functions

if [ -z "$ARSENIC_PATH" ]; then
  pushd $(dirname $(dirname $(dirname ${BASH_SOURCE[0]}))) > /dev/null
  export ARSENIC_PATH=`pwd`
  popd > /dev/null
fi

if [ -f "$ARSENIC_PATH/etc/common.sh" ]; then
  source "$ARSENIC_PATH/etc/common.sh"
fi

## END: Load common functions
####

CHECK_ONLY=""
CMD=""
ARG_HOST=""
ARG_URL=""
ME=$0
if [ ! -z "$1" ]; then
  CMD="$1"
fi

if [ ! -z "$2" ]; then
  ARG_HOST="$2"
fi

if [ ! -z "$3" ]; then
  ARG_URL="$3"
fi

if [ -z "$CMD" ] ; then
  CMD="scan"
fi

#set -euo pipefail
set -eu
# set -x
WEB_PORTS="(80|443|3000|8000|8001|8080|8443)"
WEB_PORT_REGEX="portid=\"$WEB_PORTS\"|tcp/$WEB_PORTS"

function newGetHostUrls {
  for host in hosts/*; do
    if compgen -G "$host/recon/*hostnames.txt" > /dev/null 2>&1; then
      cat $host/recon/*hostnames.txt
    elif compgen -G "$host/recon/*ip-addresses.txt" > /dev/null 2>&1; then
      cat $host/recon/*ip-addresses.txt
    fi
  done | sort -u \
  | as-prune-blacklisted-domains \
  | grep -vP "(//((sso\.|scm\.)?azurewebsites\.net|(sso\.|scm\.)?azure\-mobile\.net|s3\.amazonaws\.com)$)|((\.secureserver\.net|\.microsoftonline\.com|windows\.net|amazonaws\.com|hscoscdn)$)"  \
  | while read hostname; do

    host=$(grep -rP "^$(echo $hostname | sed 's/\./\\./g')$" hosts/*/recon/*{hostnames,ip-addresses}.txt 2>/dev/null | head -n1 | cut -d/ -f2)

    if [ -z "$host" ]; then
      _warn "no host found for hostname: $hostname"
    fi

    draft="nope"
    if [ -f "hosts/$host/00_metadata.md" ] ; then
      draft=$(grep draft "hosts/$host/00_metadata.md" || echo "nope")
    fi
    if [ "$draft" == "nope" ]; then

      if grep -P "$WEB_PORT_REGEX" hosts/$host/recon/nmap-* > /dev/null 2>&1; then
        grep -P "$WEB_PORT_REGEX" hosts/$host/recon/nmap-* | grep -hoP "$WEB_PORTS" | sort -d | uniq | while read port; do
          SHOULD_ECHO=1
          proto="http://"
          if echo $port | grep 443 > /dev/null 2>&1; then
             proto="https://"
          fi
          if [ "$port" == "80" ] || [ "$port" == "443" ] ; then
            url="${proto}${hostname}"
            if [ "$port" == "80" ] ; then
              if grep -P "\b443\b" hosts/$host/recon/nmap-* >/dev/null 2>&1 ; then
                # this is port 80, but 443 is listening. lets use that instead
                SHOULD_ECHO=0
              fi
            fi
          else
            url="${proto}${hostname}:$port"
          fi

          if [ $SHOULD_ECHO -eq 1 ]; then
            output_file="gobuster.$(echo "$url" | sed "s/:\/\//./" | sed 's/\//\./g').$wordlist_name.txt"
            if [ ! -f "hosts/$host/recon/$output_file" ] ; then
              echo $host $url
            fi
          fi
        done
      fi
    fi
  done | sort -d | uniq
}

function scanHost {
  set +u
  host="$1"
  url="$2"
  set -u

  _ "Content Discovery / $host / $url / checking"


  draft="nope"
  if [ -f "hosts/$host/00_metadata.md" ] ; then
    draft=$(grep draft "hosts/$host/00_metadata.md" || echo "nope")
  fi
  if [ "$draft" == "nope" ]; then
    _info "Content Discovery / $host / $url / preparing"
    cd "hosts/$host"
    output_file="gobuster.GET.$(echo "$url" | sed "s/:\/\//./" | sed 's/\//\./g').$wordlist_name.txt"

    gitPull
    if [ ! -f "recon/$output_file" ] ; then
      _ "Scanning $host $url"
      if [ ! -z $CHECK_ONLY ]; then
        echo "$url"
      else
        # gobuster dir -e -k --random-agent -d -u $url -w ../../recon/gobuster-wordlist.txt -o "recon/gobuster-wordlist-$hostname-$port.txt" &

        # If the host points to an S3 bucket, we don't want to gobuster it
        if curl -sIL $host | grep -q "https://aws.amazon.com/s3/"; then
          _info "Content Discovery / $host / $url / s3 detected"
          echo "s3" > $output_file
          gitCommit "recon/$output_file" "skip gobuster $url" reset
        else
          gitLock "recon/$output_file" "Gobuster lock: $url"

          set +o pipefail
          set +e

          _info "Content Discovery / $host / $url / running"
          as-buster -k -e -a Firefox -u $url -w $wordlist_file
        fi

        gitCommit "." "Gobuster complete: $url"
        set -e
        set -o pipefail
        _info "Content Discovery / $host / $url / complete"
      fi
    fi
    cd - > /dev/null
  fi

  if [ $MANUAL -eq 0 ]; then
    ARGS=$(head -n1 <<<$($ME list | grep -v "no host found"))
    if [ ! -z "$ARGS" ] ; then
      ARG_HOST=$(echo "$ARGS" | awk '{print $1}')
      ARG_URL=$(echo "$ARGS" | awk '{print $2}')
      exec $ME scan
    fi

    set +e
    if grep lock hosts/*/recon/gobuster*.txt | grep :lock > /dev/null; then
      _warn "other gobusters are still running... lets wait before continuing"
      exit 1
    fi
  fi
}

if [ ! -f "recon/wordlist-content-discover.txt" ]; then
  arsenic wordlist web-content > "recon/wordlist-content-discover.txt"
fi

wordlist_file=$(realpath "recon/wordlist-content-discover.txt")
wordlist_name=`basename $wordlist_file`
wordlist_name="${wordlist_name%.*}"

if [ -z "$CMD" ] ; then
  _warn "$0 [ list | scan  [ hostname/ip url ]  ]"
  exit
fi

gitPull

if [ "$CMD" == "list" ]; then
  newGetHostUrls
  exit
fi

if [ "$CMD" == "scan" ] ; then
  MANUAL=1
  if [ -z "$ARG_HOST" ] ; then
    MANUAL=0
    _warn no args found, autodetecting
    ARGS=$(head -n1 <<<$($ME list | grep -v "no host found" | sort -R))
    ARG_HOST=$(echo "$ARGS" | awk '{print $1}')
    ARG_URL=$(echo "$ARGS" | awk '{print $2}')
    if [ "$ARG_HOST" == "" ]; then
      set +e
      if grep lock hosts/*/recon/gobuster*.txt | grep :lock > /dev/null; then
        _warn "other gobusters are still running... lets wait before continuing"
        exit 1
      fi
      exit
    fi
    _warn "Auto selected $ARG_HOST $ARG_URL"
  fi
  scanHost $ARG_HOST $ARG_URL
fi
