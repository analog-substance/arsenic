fmt := import("fmt")
text := import("text")
os := import("os")
filepath := import("filepath")
slice := import("slice")
arsenic := import("arsenic")
url := import("url")
script := import("script")
times := import("times")
log := import("log")
rand := import("rand")
git := import("git")
os2 := import("os2")
exec := import("exec")

manual := true

action := "scan"
if args.action {
  action = args.action
}

argHost := undefined
if args.host {
  argHost = arsenic.host(args.host)
  if is_error(argHost) {
    script.stop(argHost)
  }
}

proxy := ""
if args.proxy {
  proxy = args.proxy
}

flags := []
if args.flags {
  flags = text.split(args.flags, ",")
}

getURLs := func(host) {
  re := text.re_compile(`\.(png|jpe?g|ico|css|gif|js)$`)

  urls := []
  codes := [200]
  patterns := ["recon/gobuster.*.txt", "recon/ffuf.*.json", "recon/dirb.*.txt"]
  
  discoveredURLs := host.content_discovery_urls(patterns, codes)
  if is_error(discoveredURLs) {
    script.stop(discoveredURLs)
  }

  for u in discoveredURLs {
    if re.match(u) {
      continue
    }

    urls = append(urls, u)
  }

  urls = slice.unique(urls)
  if is_error(urls) {
    script.stop(urls)
  }

  return urls
}

getHosts := func() {
  err := git.pull()
  if is_error(err) {
    script.stop(err)
  }

  allHosts := arsenic.hosts(append(flags, "web-content"))
  if is_error(allHosts) {
    script.stop(allHosts)
  }

  hosts := []
  for host in allHosts {
    exists := host.file_exists(filepath.join("recon", "wordlist-content-discover.txt"))
    if is_error(exists) {
      script.stop(exists)
    }

    if exists {
      continue
    }

    previousDir := os.getwd()
    if is_error(previousDir) {
      script.stop(previousDir)
    }

    err = os.chdir(host.dir)
    if is_error(err) {
      script.stop(err)
    }

    if len(getURLs(host)) > 0 {
      hosts = append(hosts, host)
    }

    err = os.chdir(previousDir)
    if is_error(err){
      script.stop(err)
    }
  }
  return hosts
}

scanHost := func(host) {
  log.msg(format("Aquatone / %s / checking", host.name))

  contentDiscoverPath := filepath.join("recon", "wordlist-content-discover.txt")
  exists := host.file_exists(contentDiscoverPath)
  if is_error(exists) {
    script.stop(exists)
  }

  if !exists {
    log.msg(format("Aquatone / %s / preparing", host.name))

    previousDir := os.getwd()
    if is_error(previousDir) {
      script.stop(previousDir)
    }

    err := os.chdir(host.dir)
    if is_error(err) {
      script.stop(err)
    }

    err = git.lock(contentDiscoverPath, format("Aquatone lock: %s", host.name))
    if is_error(err) {
      script.stop(err)
    }

    err = os2.write_file(contentDiscoverPath, text.join(getURLs(host), "\n"))
    if is_error(err) {
      script.stop(err)
    }

    log.msg(format("Aquatone / %s / running", host.name))

    cmdArgs := ["-out", filepath.join("recon", "aquatone-wordlist-content-discover")]
    if proxy != "" {
      cmdArgs = append(cmdArgs, "-proxy", proxy)
    }

    cmd := exec.cmd("aquatone", cmdArgs...)
    if is_error(cmd) {
      script.stop(cmd)
    }

    err = cmd.set_file_stdin(contentDiscoverPath)
    if is_error(err) {
      script.stop(err)
    }

    err = cmd.run()
    if is_error(err) {
      script.stop(err)
    }

    htmlFiles := filepath.glob("**/*.html")
    if is_error(htmlFiles) {
      script.stop(htmlFiles)
    }

    for file in htmlFiles {
      err = os2.regex_replace_file(file, `^\xEF\xBB\xBF`, "")
      if is_error(err) {
        script.stop(err)
      }
    }

    err = git.commit(".", format("Aquatone complete: %s", host.name))
    if is_error(err) {
      script.stop(err)
    }

    err = os.chdir(previousDir)
    if is_error(err){
      script.stop(err)
    }
  }
  
  log.msg(format("Aquatone / %s / complete", host.name))
  times.sleep(10 * times.second)
}

htmlFiles := filepath.glob("**/*.html")
if is_error(htmlFiles) {
  script.stop(htmlFiles)
}

for file in htmlFiles {
  err := os2.regex_replace_file(file, `^\xEF\xBB\xBF`, "")
  if is_error(err) {
    script.stop(err)
  }
}

script.stop()

err := git.pull()
if is_error(err) {
  script.stop(err)
}

if action == "list" {
  hosts := getHosts()
  for h in hosts {
    fmt.println(h.name)
  }
  script.stop()
}

autoSelect := func() {
  argHost = slice.rand_item(getHosts())
  if !argHost {
    files := arsenic.locked_files("hosts/*/recon/wordlist-content-discover.txt")
    if is_error(files) {
      script.stop(files)
    }

    if len(files) > 0 {
      log.warn("other aquatones are still running... lets wait before continuing")
      script.stop()
    }

    script.stop("No host found")
  }

  log.warn(format("Auto selected %s", argHost.name))
}

if !argHost {
  manual = false
  log.warn("no args found, autodetecting")

  autoSelect()
}

for {
  scanHost(argHost)
  if manual {
    break
  }

  autoSelect()
}
