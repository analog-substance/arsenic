#!/usr/bin/env arsenic

fmt := import("fmt")
text := import("text")
os := import("os")
filepath := import("filepath")
slice := import("slice")
arsenic := import("arsenic")
script := import("script")
times := import("times")
log := import("log")
git := import("git")
os2 := import("os2")
exec := import("exec")
cobra := import("cobra")

getURLs := func(host) {
  re := text.re_compile(`\.(png|jpe?g|ico|css|gif|js)$`)

  urls := []
  codes := [200]
  patterns := ["recon/gobuster.*.txt", "recon/ffuf.*.json", "recon/dirb.*.txt"]
  
  discoveredURLs := host.content_discovery_urls(patterns, codes)
  check_err(discoveredURLs)

  for u in discoveredURLs {
    if re.match(u) {
      continue
    }

    urls = append(urls, u)
  }

  urls = slice.unique(urls)
  check_err(urls)

  return urls
}

getHosts := func(flags) {
  err := git.pull()
  check_err(err)

  allHosts := arsenic.hosts(append(flags, "web-content"))
  check_err(allHosts)

  hosts := []
  for host in allHosts {
    exists := host.file_exists(filepath.from_slash("recon/wordlist-content-discover.txt"))
    check_err(exists)

    if exists {
      continue
    }

    previousDir := os.getwd()
    check_err(previousDir)

    err = os.chdir(host.dir)
    check_err(err)

    if len(getURLs(host)) > 0 {
      hosts = append(hosts, host)
    }

    err = os.chdir(previousDir)
    check_err(err)
  }
  return hosts
}

flags := []

rootCmd := cobra.root_cmd(script.name, "Take screenshots of URLs found during content enumeration scans.")
rootCmd.persistent_flags.string_slicep("flags", "f", [], "Filter hosts by flags")
rootCmd.add_disable_git_flag()

rootCmd.set_persistent_pre_run(func(cmd, args) {
  flags = cmd.flags.get_string_slice("flags")

  err := git.pull()
  check_err(err)
})

listCmd := cobra.cmd("list", "Lists the hosts that need screenshots.")
rootCmd.add_command(listCmd)

listCmd.set_run(func(cmd, args) {
	hosts := getHosts(flags)
  for h in hosts {
    fmt.println(h.name)
  }
})

scanCmd := cobra.cmd("scan", "Scan hosts that need screenshots.")
scanCmd.flags.stringp("host", "H", "", "Host to scan.")
scanCmd.flags.stringp("proxy", "p", "", "Proxy to use for aquatone.")
rootCmd.add_command(scanCmd)
rootCmd.set_run(scanCmd)

scanCmd.set_run(func(cmd, args) {
  targetHost := undefined
  targetHostName := cmd.flags.get_string("host")
  proxy := cmd.flags.get_string("proxy")

  manual := targetHostName != ""

  autoSelect := func() {
    targetHost = slice.rand_item(getHosts(flags))
    if !targetHost {
      files := arsenic.locked_files("hosts/*/recon/wordlist-content-discover.txt")
      check_err(files)

      if len(files) > 0 {
        log.warn("other aquatones are still running... lets wait before continuing")
        script.stop()
      }

      script.stop("No host found")
    }

    log.warn(format("Auto selected %s", targetHost.name))
  }

  scanHost := func(host) {
    log.msg(format("Aquatone / %s / checking", host.name))

    contentDiscoverPath := filepath.from_slash("recon/wordlist-content-discover.txt")
    exists := host.file_exists(contentDiscoverPath)
    check_err(exists)

    if !exists {
      log.msg(format("Aquatone / %s / preparing", host.name))

      previousDir := os.getwd()
      check_err(previousDir)

      err := os.chdir(host.dir)
      check_err(err)

      err = git.lock(contentDiscoverPath, format("Aquatone lock: %s", host.name))
      check_err(err)

      err = os2.write_file(contentDiscoverPath, text.join(getURLs(host), "\n"))
      check_err(err)

      log.msg(format("Aquatone / %s / running", host.name))

      cmdArgs := ["-out", filepath.from_slash("recon/aquatone-wordlist-content-discover")]
      if proxy != "" {
        cmdArgs = append(cmdArgs, "-proxy", proxy)
      }

      cmd := exec.cmd("aquatone", cmdArgs...)
      check_err(cmd)

      err = cmd.set_file_stdin(contentDiscoverPath)
      check_err(err)

      err = cmd.run()
      check_err(err)

      htmlFiles := filepath.glob("**/*.html")
      check_err(htmlFiles)

      for file in htmlFiles {
        err = os2.regex_replace_file(file, `^\xEF\xBB\xBF`, "")
        check_err(err)
      }

      err = git.commit(".", format("Aquatone complete: %s", host.name))
      check_err(err)

      err = os.chdir(previousDir)
      check_err(err)
    }
    
    log.msg(format("Aquatone / %s / complete", host.name))
    times.sleep(10 * times.second)
  }

  if manual {
    targetHost = arsenic.host(targetHostName)
    check_err(targetHost)
  } else {
    log.warn("no args found, autodetecting")

    autoSelect()
  }

  for {
    scanHost(targetHost)

    if manual {
      break
    }

    autoSelect()
  }
})

err := rootCmd()
check_err(err)
