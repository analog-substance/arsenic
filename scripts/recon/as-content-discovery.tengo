#!/usr/bin/env arsenic

fmt := import("fmt")
text := import("text")
os := import("os")
filepath := import("filepath")
slice := import("slice")
arsenic := import("arsenic")
scope := import("scope")
script := import("script")
log := import("log")
git := import("git")
set := import("set")
cobra := import("cobra")
wordlist := import("wordlist")
os2 := import("os2")
exec := import("exec")

inScopeOnly := false
wordlistTypes := wordlist.types()
defaultWordlistType := "web-content"
flags := []
wordlistFile := ""
wordlistName := ""

genOutputFileName := func(rawURL, wordlistName) {
  rawURL = text.replace(rawURL, "://", ".", -1)
  rawURL = text.replace(rawURL, "/", ".", -1)
  return format("ffuf.%s.%s.json", rawURL, wordlistName)
}

getHostURLs := func(flags, wordlistName) {
  hosts := arsenic.hosts(flags)
  check_err(hosts)

  hostURLs := []
  urlSet := set.string_set()
  for host in hosts {
    urls := host.urls("http")
    check_err(urls)

    if inScopeOnly {
      urls = scope.prune(urls)
    }

    for rawURL in urls {
      success := urlSet.add(rawURL)
      check_err(success)

      if !success {
        continue
      }

      outputFile := genOutputFileName(rawURL, wordlistName)
      
      exists := host.file_exists(filepath.join("recon", outputFile))
      check_err(exists)

      if !exists {
        hostURLs = append(hostURLs, format("%s %s", host.name, rawURL))
      }
    }
  }

  return hostURLs
}

rootCmd := cobra.root_cmd(script.name, "Run content enumeration on current scope")
rootCmd.persistent_flags.string_slicep("flags", "f", [], "Filter hosts by flags")
rootCmd.persistent_flags.stringp("wordlist", "w", defaultWordlistType, "Wordlist type or path to use. If type, will be generated if it doesn't exist")
rootCmd.persistent_flags.boolp("in-scope-only", "i", false, "Prune URLs to in scope only.")
rootCmd.add_disable_git_flag()

rootCmd.set_persistent_pre_run(func(cmd, args) {
  flags = cmd.flags.get_string_slice("flags")
  inScopeOnly = cmd.flags.get_bool("in-scope-only")
  wordlistTypeOrPath := cmd.flags.get_string("wordlist")

  isType := false
  if slice.contains_string(wordlistTypes, wordlistTypeOrPath) {
    isType = true
    wordlistFile = filepath.abs(filepath.join("recon", format("wordlist-%s.txt", wordlistTypeOrPath)))
  } else {
    wordlistFile = filepath.abs(wordlistTypeOrPath)
  }
  check_err(wordlistFile)

  if isType && !filepath.file_exists(wordlistFile) {
    log.info(format("Generating wordlist %s...", wordlistTypeOrPath))
    err := wordlist.generate(wordlistTypeOrPath, wordlistFile)
    check_err(err)
  }

  wordlistName = filepath.base(wordlistFile)
  wordlistName = text.trim_suffix(wordlistName, filepath.ext(wordlistName))

  // I think we have the appropriate checks in the other commands
  // err := git.pull()
  // check_err(err)
})

listCmd := cobra.cmd("list", "Lists the hosts that need content enumeration")
rootCmd.add_command(listCmd)

listCmd.set_run(func(cmd, args) {
  hostURLs := getHostURLs(flags, wordlistName)
  for hostURL in hostURLs {
    fmt.println(hostURL)
  }
})

scanCmd := cobra.cmd("scan", "Scan hosts that need content enumeration")
scanCmd.flags.stringp("host", "H", "", "Host to scan. Must be used with --url.")
scanCmd.flags.stringp("url", "u", "", "URL to scan. Must be used with --host.")
scanCmd.flags.stringp("proxy", "x", "", "Proxy URL (SOCKS5 or HTTP). For example: http://127.0.0.1:8080 or socks5://127.0.0.1:8080")
rootCmd.add_command(scanCmd)
rootCmd.set_run(scanCmd)

scanCmd.set_run(func(cmd, args) {
  targetHost := cmd.flags.get_string("host")
  targetURL := cmd.flags.get_string("url")
  proxy := cmd.flags.get_string("proxy")

  manual := targetHost != "" && targetURL != ""

  if (targetHost != "" && targetURL == "") || (targetHost == "" && targetURL != "") {
    script.stop("[!] Host and URL must not be empty.")
  }

	autoSelect := func() {
    elem := slice.rand_item(getHostURLs(flags, wordlistName))
    if !elem {
      files := arsenic.locked_files(filepath.from_slash("hosts/*/recon/ffuf*.json"))
      check_err(files)

      if len(files) > 0 {
        log.warn("other ffufs are still running... lets wait before continuing")
        script.stop()
      }

      script.stop("No host found")
    }
    
    targetHost = text.fields(elem)[0]
    targetURL = text.fields(elem)[1]

    log.warn(format("Auto selected %s %s", targetHost, targetURL))
  }

  scanHost := func(host, rawURL) {
    log.msg(format("Content Discovery / %s / %s / checking", host, rawURL))
    // check if host is a draft

    // do the following only if the host isn't a draft
    log.info(format("Content Discovery / %s / %s / preparing", host, rawURL))

    previousDir := os.getwd()
    check_err(previousDir)

    err := os.chdir(filepath.join("hosts", host))
    check_err(err)
    
    outputFile := genOutputFileName(rawURL, wordlistName)

    git.pull()

    outputPath := filepath.join("recon", outputFile)
    if !filepath.file_exists(outputPath) {
      log.msg(format("Scanning %s %s", host, rawURL))

      // check if url is S3 bucket

      err = git.lock(outputPath, format("ffuf lock: %s", rawURL))
      check_err(err)

      log.info(format("Content Discovery / %s / %s / running", host, rawURL))

      args := [ "-a", "Firefox", "-u", rawURL, "-w", wordlistFile, "-o", outputFile ]
      if proxy != "" {
        args = append(args, "-x", proxy)
      }

      err = script.run_script("as-ffuf.tengo", args...)
      check_err(err)

      log.info(format("Content Discovery / %s / %s / complete", host, rawURL))
    }

    err = git.commit(".", format("ffuf complete: %s", rawURL))
    check_err(err)

    err = os.chdir(previousDir)
    check_err(err)
  }

  if !manual {
    log.warn("no args found, autodetecting")

    autoSelect()
  }

  for {
    scanHost(targetHost, targetURL)
    if manual {
      break
    }

    autoSelect()
  }
})

ignoreCmd := cobra.cmd("ignore", "Ignore host that need content enumeration")
ignoreCmd.flags.stringp("host", "H", "", "Host to scan. Must be used with --url.")
ignoreCmd.flags.stringp("url", "u", "", "URL to scan. Must be used with --host.")
rootCmd.add_command(ignoreCmd)
rootCmd.set_run(ignoreCmd)

ignoreCmd.set_run(func(cmd, args) {
  targetHost := cmd.flags.get_string("host")
  targetURL := cmd.flags.get_string("url")

  cmd := os.exec("whoami")
  check_err(cmd)
  whoami := cmd.output()

  if (targetHost != "" && targetURL == "") || (targetHost == "" && targetURL != "") {
    script.stop("[!] Host and URL must not be empty.")
  }

  ignoreHost := func(host, rawURL) {
    log.info(format("Content Discovery / %s / %s / ignoring", host, rawURL))
    outputFile := genOutputFileName(rawURL, wordlistName)
    outputPath := filepath.join("hosts", host, "recon", outputFile)

    if !filepath.file_exists(outputPath) {
      log.msg(format("Ignoring %s", outputPath))
      err := os2.write_file(outputPath, format("ignore::%s", whoami))
      check_err(err)
    }
  }

  ignoreHost(targetHost, targetURL)
})

err := rootCmd()
check_err(err)
